''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Author:  Arkopaul Sarkar
' Date:    2024-10-25
' Version: 2.0
' License: MIT
' Description: PlantUML standard library for ontology diagrams
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
@startuml ontology
' do not show the circled character in classes
hide circle
' do not show emply members for classes and object 
hide empty members

skinparam roundCorner 10

skinparam class{
 BackgroundColor White
 fontColor black
 FontStyle bold
 FontName Helvetica
}
skinparam object{
    BackgroundColor White
    fontColor Black
    BorderColor Black 
    FontName Helvetica   
}

!$default_direction = x

' global variable for prefixes 
' (expects json with key = prefix, value = namespace)
!$prefixes = { "owl" : "http://www.w3.org/2002/07/owl#",
               "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
               "rdfs" : "http://www.w3.org/2000/01/rdf-schema#"}

' global variable for setting custom color for namespaces
' (expects json with key = prefix (should be present in $prefixes), value = color)
!$namespace_colors = { "rdf" : "White" }
!$namespace_default_color = "White"

' 

' add new variable to the collection
!$chain = ","
!unquoted procedure addVariable($var, $iri)
    !$chain = $chain + $var + "=" + $iri + "," 
!endprocedure

' check if variable exists for the given iri
!unquoted function existsVariable($iri)
    !foreach $i in %splitstr($chain, ",")
        !$tok = %splitstr($i, "=")
        !if $tok[1] == $iri
            !return %true()
        !endif
    !endfor
    !return %false()
!endfunction

' get the variable for the given IRI
!unquoted function getVariable($iri)
    !foreach $i in %splitstr($chain, ",")
        !$tok = %splitstr($i, "=")
        !if $tok[1] == $iri
            !return $tok[0]
        !endif
    !endfor
    !return ""
!endfunction

' keeps count of new variables (DO NOT CHANGE $count)
!$count = 0
!unquoted function increment($v)
    %set_variable_value("$count", %intval($count) + %intval($v))
    !return $count
!endfunction

' ' get new variable name
!unquoted function newVar()
    !return "v" + increment(1)
!endfunction

' returns the color based on the namespace
' if no color is specified for the given namespace 
'  or no namespace is specified then default is returned
!unquoted function getColor($iri)
    !if %strpos($iri, ":") != -1
        !$list = %splitstr($iri, ":")
        !if %json_key_exists($namespace_colors, $list[0])
            !return $namespace_colors[$list[0]]
        !else
            !return $namespace_default_color
        !endif
    !else
        !return $namespace_default_color
    !endif 
!endfunction

' returns the correct direction
' if no direction is passed then either the default direction or $sdir
!unquoted function getDirection($direction, $sdir)
    !if $direction != x 
        !return $direction
    !elseif $default_direction != x
        !return $default_direction
    !else
        !return $sdir
    !endif 
!endfunction

'-------------------------------------------------------'
' Class declaration
'-------------------------------------------------------'
' create a class
' iri should use only prefix and not complete url
!unquoted procedure class($alias, $iri)
    class "$iri" as $alias #getColor($iri)
!endprocedure

!unquoted procedure oClass($iri)
    !$var = newVar()
    class "$iri" as $var #getColor($iri)
    addVariable($var, $iri)
!endprocedure

'-------------------------------------------------------'
' Individual declaration
'-------------------------------------------------------'
'create an instance
' iri should use only prefix and not complete url
!unquoted procedure individual($alias, $iri)
    object "<u>$iri" as $alias #getColor($iri)
!endprocedure

' iri should use only prefix and not complete url
!unquoted procedure individual($alias, $iri, $class)
    object "<u>$iri" as $alias #getColor($iri)
    $alias : <back:#getColor($class)>type = $class</back>
!endprocedure

!unquoted procedure oIndividual($iri)
    !$var = newVar()
    object "<u>$iri" as $var #getColor($iri)
    addVariable($var, $iri)
!endprocedure

!unquoted procedure oIndividual($iri, $class = "")   
    !$var = newVar()
    object "<u>$iri" as $var #getColor($iri)
    $var : <back:#getColor($class)>type = $class</back> 
    ' $var : --
    addVariable($var, $iri)
!endprocedure

'-------------------------------------------------------'
' Class membership
'-------------------------------------------------------'
' create membership of $individual1 to $class
!unquoted procedure typeOf($individual, $class, $direction = x)   
    !$m = getVariable($class)
    !$n = getVariable($individual)
    !$dir = getDirection($direction, down)
    !if $m && $n
        $m <.$dir. $n
    !else
        $class <.$dir. $individual
    !endif
!endprocedure

'-------------------------------------------------------'
' Class complement (not)
'-------------------------------------------------------'
!unquoted procedure complement($alias, $class, $direction = x)   
    () "<<owl:complementOf>>" as $alias
    !$m = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $m
        $alias .$dir. $m
    !else
        $alias .$dir. $class
    !endif
!endprocedure

'-------------------------------------------------------'
' Assert associations
'-------------------------------------------------------'
' create object property ($predicate) association from $subject individual to $object individual
' proeprty direction is left of $subject by default
!unquoted procedure property($subject, $predicate, $object, $direction = x)
    !$m = getVariable($subject)
    !$n = getVariable($object)
    !$dir = getDirection($direction, left)
    !if $m && $n
        $m -$dir-> $n : $predicate
    !else
        $subject -$dir-> $object : $predicate
    !endif
!endprocedure

' create data property ($predicate) association from $subject individual to $value
!unquoted procedure data($subject, $predicate, $value)
    !$m = getVariable($subject)
    !if $m
        object $m {
            --
            $predicate  = $value
        }
    !else
        object $subject {
            --
            $predicate  = $value
        }
    !endif
!endprocedure

'-------------------------------------------------------'
' Mapping among individuals
'-------------------------------------------------------'
' create data property ($predicate) association from $subject individual to $value
' link direction is left of $subject by default
!unquoted procedure sameAs($individual1, $individual2, $direction = x)
    !$m = getVariable($individual1)
    !$n = getVariable($individual2)
    !$dir = getDirection($direction, left)
    !if $m && $n
        $m <-$dir-> $n : <<owl:sameAs>>
    !else
        $individual1 <-$dir-> $individual2 : <<owl:sameAs>>
    !endif    
!endprocedure

' create data property ($predicate) association from $subject individual to $value
' link direction is left of $subject by default
!unquoted procedure differentFrom($individual1, $individual2, $direction = x)
    !$m = getVariable($individual1)
    !$n = getVariable($individual2)
    !$dir = getDirection($direction, left)
    !if $m && $n
        $m <-$dir-> $n : <<owl:differentFrom>>
    !else
        $individual1 <-$dir-> $individual2 : <<owl:differentFrom>>
    !endif
!endprocedure

' make all given individuals in the list as different 
' individual variables need to be passed as a json list
!unquoted procedure allDifferent($individuals, $direction = x)
    !$var = "adif" + increment(1)
    () "<<owl:AllDifferent>>" as $var
    !$dir = getDirection($direction, up)
    !foreach $item in %str2json($individuals)
        !$m = getVariable($item)
        !if $m
            $var .$dir. $m
        !else
            $var .$dir. $item
        !endif
    !endfor 
!endprocedure

'-------------------------------------------------------'
' Mapping among classes
'-------------------------------------------------------'
' define the child class as a subclass of the parent class
' class is placed above object by default
!unquoted procedure subClass($child, $parent, $direction = x)
    !$m = getVariable($child)
    !$n = getVariable($parent)
    !$dir = getDirection($direction, down)
    !if $m && $n
        $n <|-$dir- $m
    !else
        $parent <|-$dir- $child
    !endif
!endprocedure

' define $class1 as equivalent class of $class2
' link direction is left of $subject by default
!unquoted procedure equivalent($class1, $class2, $direction = x)
    !$m = getVariable($class1)
    !$n = getVariable($class2)
    !$dir = getDirection($direction, left)
    !if $m && $n
        $m <-$dir-> $n : <<owl:equivalentClass>> 
    !else
        $class1 <-$dir-> $class2 : <<owl:equivalentClass>>
    !endif
!endprocedure

' define $class1 as equivalent class of $class2
' link direction is left of $subject by default
!unquoted procedure disjoint($class1, $class2, $direction = x)
    !$m = getVariable($class1)
    !$n = getVariable($class2)
    !$dir = getDirection($direction, left)
    !if $m && $n
        $m <-$dir-> $n : <<owl:disjointWith>>
    !else
        $class1 <-$dir-> $class2 : <<owl:disjointWith>>
    !endif
!endprocedure

' make all given classes in the list as different 
' individual variables need to be passed as a json list
!unquoted procedure allDisjoint($classes, $direction = x)
    !$var = "adis" + increment(1)
    () "<<owl:AllDisjoint>>" as $var
    !$dir = getDirection($direction, up)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dir. $m
        !else
            $var .$dir. $item
        !endif
    !endfor 
!endprocedure

'-------------------------------------------------------'
' Class operations (union, intersection)
'-------------------------------------------------------'
' make all given classes in the list as an union class  
' individual variables need to be passed as a json list
' alternative: assign to variable
!unquoted procedure union($alias, $classes, $direction = x)
    () "<<owl:unionOf>>" as $alias
    !$dir = getDirection($direction, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $alias .$dir. $m
        !else
            $alias .$dir. $item
        !endif
    !endfor 
!endprocedure

' make class as equivalent to the union of given %classes 
' individual variables need to be passed as a json list
!unquoted procedure equiUnion($class, $classes, $directionUnion = x, $direction = x)
    !$var = "un" + increment(1)
    () "<<owl:unionOf>>" as $var
    !$dirUnion = getDirection($directionUnion, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dirUnion. $m
        !else
            $var .$dirUnion. $item
        !endif
    !endfor 
    !$n = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $n
       $n <-$dir-> $var : <<owl:equivalentClass>>
    !else
       $class <-$dir-> $var : <<owl:equivalentClass>>
    !endif
!endprocedure

' make class as subClassOf the union of given %classes 
' individual variables need to be passed as a json list
!unquoted procedure subUnion($class, $classes, $directionUnion = x, $direction = x)
    !$var = "un" + increment(1)
    () "<<owl:unionOf>>" as $var
    !$dirUnion = getDirection($directionUnion, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dirUnion. $m
        !else
            $var .$dirUnion. $item
        !endif
    !endfor 
    !$n = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $n
       $n -$dir-|> $var
    !else
       $class -$dir-|> $var
    !endif
!endprocedure

' make the union of given %classes subClass of $class
' individual variables need to be passed as a json list
!unquoted procedure superUnion($class, $classes, $directionUnion = x, $direction = x)
    !$var = "un" + increment(1)
    () "<<owl:unionOf>>" as $var
    !$dirUnion = getDirection($directionUnion, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dirUnion. $m
        !else
            $var .$dirUnion. $item
        !endif
    !endfor 
    !$n = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $n
        $var -$dir-|> $n
    !else
        $var -$dir-|> $class
    !endif
!endprocedure

'-------------------------------------------------------'

' make all given classes in the list as an intersection class  
' individual variables need to be passed as a json list
' !unquoted procedure intersection($classes)
'     !$var = "in" + increment(1)
'     () "<<owl:intersectionOf>>" as $var
'     !foreach $item in %str2json($classes)
'         !$m = getVariable($item)
'         !if $m
'             $var .up. $m
'         !else
'             $var .up. $item
'         !endif
'     !endfor 
' !endprocedure

' make all given classes in the list as an union class  
' individual variables need to be passed as a json list
' alternative: assign to variable
!unquoted procedure intersection($alias, $classes, $direction = x)
    () "<<owl:intersectionOf>>" as $alias
    !$dir = getDirection($direction, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $alias .$dir. $m
        !else
            $alias .$dir. $item
        !endif
    !endfor 
!endprocedure

' make class as equivalent to the intersection of given %classes 
' individual variables need to be passed as a json list
!unquoted procedure equiIntersection($class, $classes, $directionIntersection = x, $direction = x)
    !$var = "in" + increment(1)
    () "<<owl:intersectionOf>>" as $var
    !$dirInt = getDirection($directionIntersection, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dirInt. $m
        !else
            $var .$dirInt. $item
        !endif
    !endfor 
    !$n = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $n
       $n <-$dir-> $var : <<owl:equivalentClass>>
    !else
       $class <-$dir-> $var : <<owl:equivalentClass>>
    !endif
!endprocedure

' make class as subClassOf the intersection of given %classes 
' individual variables need to be passed as a json list
!unquoted procedure subIntersection($class, $classes, $directionIntersection = x, $direction = x)
    !$var = "in" + increment(1)
    () "<<owl:intersectionOf>>" as $var
    !$dirInt = getDirection($directionIntersection, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dirInt. $m
        !else
            $var .$dirInt. $item
        !endif
    !endfor 
    !$n = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $n
       $n -$dir-|> $var
    !else
       $class -$dir-|> $var
    !endif
!endprocedure

' make the intersection of given %classes subClass of $class
' individual variables need to be passed as a json list
!unquoted procedure superIntersection($class, $classes, $directionIntersection = x, $direction = x)
    !$var = "in" + increment(1)
    () "<<owl:intersectionOf>>" as $var
    !$dirInt = getDirection($directionIntersection, down)
    !foreach $item in %str2json($classes)
        !$m = getVariable($item)
        !if $m
            $var .$dirInt. $m
        !else
            $var .$dirInt. $item
        !endif
    !endfor 
    !$n = getVariable($class)
    !$dir = getDirection($direction, down)
    !if $n
        $var -$dir-|> $n
    !else
        $var -$dir-|> $class
    !endif
!endprocedure

'-------------------------------------------------------'
' value constraint
'-------------------------------------------------------'
!unquoted procedure value($alias, $property, $individual, $direction = x)
    class "    " as $alias
    !$n = getVariable($individual)
    !$dir = getDirection($direction, left)
    !if $n
        $alias -$dir-> $n : $property <<value>>
    !else
        $alias -$dir-> $individual : $property <<value>>
    !endif
!endprocedure

'-------------------------------------------------------'
' self constraint
'-------------------------------------------------------'
!unquoted procedure self($class, $property, $direction = x)
    !$n = getVariable($class)
    !$dir = getDirection($direction, right)
    !if $n
        $n -$dir-> $n : $property <<self>>
    !else
        $class -$dir-> $class : $property <<self>>
    !endif
!endprocedure

'-------------------------------------------------------'
' One of constraint
'-------------------------------------------------------'
' make the intersection of given %classes subClass of $class
' individual variables need to be passed as a json list
!unquoted procedure oneOf($alias, $individuals, $direction = x)
    () "<<owl:oneOf>>" as $alias
    !$dir = getDirection($direction, down)
    !foreach $item in %str2json($individuals)
        !$m = getVariable($item)
        !if $m
            $alias .$dir. $m
        !else
            $alias .$dir. $item
        !endif
    !endfor     
!endprocedure

'-------------------------------------------------------'
' Existential constraint on object property
'-------------------------------------------------------'
' define '$property some $class2'
' link direction is left of $class1 by default
' alternative: variable can be supplied
!unquoted procedure some($alias, $property, $class2, $direction = x)
    class "    " as $alias
    !$n = getVariable($class2)
    !$dir = getDirection($direction, right)
    !if $n
        $alias -$dir-> $n : $property <<some>>
    !else
        $alias -$dir-> $class2 : $property <<some>>
    !endif
!endprocedure

' define '$property max/min/exactly cadinality $class2'
' link direction is left of $class1 by default
' alternative: variable can be supplied
!unquoted procedure someCard($alias, $property, $class2, $scope, $cardinality, $direction = x)
    class "    " as $alias
    !$n = getVariable($class2)
    !$dir = getDirection($direction, right)    
    !if $n
        !if $scope == "max"
            $alias -$dir-> $n : $property [1..$cardinality]
        !endif
        !if $scope == "min"
            $alias -$dir-> $n : $property [$cardinality..*]
        !endif
        !if $scope == "exactly"
            $alias -$dir-> $n : $property [$cardinality]
        !endif
    !else
        !if $scope == "max"
            $alias -$dir-> $class2 : $property [1..$cardinality]
        !endif
        !if $scope == "min"
            $alias -$dir-> $class2 : $property [$cardinality..*]
        !endif
        !if $scope == "exactly"
            $alias -$dir-> $class2 : $property [$cardinality]
        !endif
    !endif
!endprocedure

' define $class1 is equivalent to '$property some $class2'
' link direction is left of $class1 by default
!unquoted procedure xSome($class1, $property, $class2, $tag = "", $direction = x)
    !$m = getVariable($class1)
    !$n = getVariable($class2)
    !$dir = getDirection($direction, right)    
    !if $tag
    !else
        !$tag = "<<some>>"
    !endif

    !if $m && %not($n)
        $m -$dir-> $class2 : $property $tag   
    !elseif %not($m) && $n
        $class1 -$dir-> $m : $property $tag      
    !elseif $m && $n
        $m -$dir-> $n : $property $tag     
    !else
        $class1 -$dir-> $class2 : $property $tag
    !endif
!endprocedure

' State '$class1 and $property some $class2' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure andSome($alias, $class1, $property, $class2, $directionIntersection = x, $direction = x)
    !$var = "andSome" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)  
    some($var, $property, $class2, $dir)
    !$m = getVariable($class1)  
    !$dirInter = getDirection($directionIntersection, right)  
    !if $m
        intersection($alias, '["$var", "$m"]', $dirInter)
    !else
        intersection($alias, '["$var", "$class1"]', $dirInter)
    !endif
!endprocedure

' State '$class1 or $property some $class2' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure orSome($alias, $class1, $property, $class2, $directionUnion = x, $direction = x)
    !$var = "orSome" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)  
    some($var, $property, $class2, $dir)
    !$m = getVariable($class1)
    !$dirUnion = getDirection($directionUnion, right)  
    !if $m
        union($alias, '["$var", "$m"]', $dirUnion)
    !else
        union($alias, '["$var", "$class1"]', $dirUnion)
    !endif
!endprocedure

' define $class1 is subClass of '$property some $class2' 
' link direction is left of $class1 by default
!unquoted procedure subSome($class1, $property, $class2, $directionSub = x, $direction = x)
    !$var = "subSome" + increment(1)
    class "    " as $var
    !$dirSub = getDirection($directionSub, down) 
    !$dir = getDirection($direction, right)  
    !$m = getVariable($class1)
    !$n = getVariable($class2)
    !if $m && $n
        $var -$dir-> $n : $property <<some>>
        $var <|-dirSub- $m
    !else
        $var -$dir-> $class2 : $property <<some>>
        $var <|-dirSub- $class1
    !endif
!endprocedure

' define '$property some $class2' is subClass of $class1
' link direction is left of $class1 by default
!unquoted procedure superSome($class1, $property, $class2, $directionSuper = x, $direction = x)
    !$var = "superSome" + increment(1)
    class "    " as $var
    !$m = getVariable($class1)
    !$n = getVariable($class2)      
    !$dirSup = getDirection($directionSuper, down) 
    !$dir = getDirection($direction, right) 
    !if $m && $n
        $var -$dir-> $n : $property <<some>>
        $m <|-dirSup- $var
    !else
        $var -$dir-> $class2 : $property <<some>>
        $class1 <|-dirSup- $var
    !endif
!endprocedure

'-------------------------------------------------------'
' Existential constraint on Data property
'-------------------------------------------------------'
' define $class1 is equivalent to '$property some $datatype'
' link direction is left of $class1 by default
' alternative can pass variable 
!unquoted procedure someData($alias, $property, $datatype, $direction = x)
    class "    " as $alias
    class "$datatype" #white;text:black ##[dotted]black
    !$dir = getDirection($direction, right)  
    $alias -$dir-> "$datatype" : $property <<some>>
!endprocedure

' define '$property max/min/exactly cadinality $datatype'
' link direction is left of $class1 by default
' alternative: variable can be supplied
!unquoted procedure someDataCard($alias, $property, $datatype, $scope, $cardinality, $direction = x)
    class "    " as $alias
    class "$datatype" #white;text:black ##[dotted]black   
    !$dir = getDirection($direction, right)
    !if $scope == "max"
        $alias -$dir-> "$datatype" : $property [1..$cardinality]
    !endif
    !if $scope == "min"
        $alias -$dir-> "$datatype" : $property [$cardinality..*]
    !endif
    !if $scope == "exactly"
        $alias -$dir-> "$datatype" : $property [$cardinality]
    !endif
!endprocedure

' define $class1 is equivalent to '$property some $datatype'
' link direction is left of $class1 by default
!unquoted procedure xSomeData($class1, $property, $datatype, $tag = "", $direction = x)
    class "$datatype" #white;text:black ##[dotted]black
    !$m = getVariable($class1)
    !$dir = getDirection($direction, right)
    !if $m 
        !if $tag 
            $m -$dir-> "$datatype" : $property $tag
        !else
            $m -$dir-> "$datatype" : $property <<some>>
        !endif
    !else
        !if $tag 
             $class1 -$dir-> "$datatype" : $property $tag
        !else
             $class1 -$dir-> "$datatype" : $property <<some>>
        !endif
    !endif
!endprocedure

' State '$class1 and $property some $datatype' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure andSomeData($alias, $class1, $property, $class2, $directionIntersection = x, $direction = x)
    !$var = "andSomeData" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    someData($var, $property, $class2, $dir)
    !$m = getVariable($class1)    
    !$dirInter = getDirection($directionIntersection, right)
    !if $m
        intersection($alias, '["$var", "$m"]', dirInter)
    !else
        intersection($alias, '["$var", "$class1"]', dirInter)
    !endif
!endprocedure

' State '$class1 or $property some $datatype' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure orSomeData($alias, $class1, $property, $class2, $directionUnion = x, $direction = x)
    !$var = "orSomeData" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    someData($var, $property, $class2, $dir)
    !$m = getVariable($class1)
    !$directionUn = getDirection($directionUnion, right)
    !if $m
        union($alias, '["$var", "$m"]', $directionUn)
    !else
        union($alias, '["$var", "$class1"]', $directionUn)
    !endif
!endprocedure

' define $class1 is subClass of '$property some $datatype' 
' link direction is left of $class1 by default
!unquoted procedure subSomeData($class1, $property, $datatype, $directionSub = x, $direction = x)
    !$var = "subSomeData" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    !$direcSub = getDirection($directionSub, down)
    !$m = getVariable($class1)
    !if $m
        $var -$dir-> "$datatype" : $property <<some>>
        $var <|-direcSub- $m
    !else
        $var -$dir-> "$datatype" : $property <<some>>
        $var <|-direcSub- $class1
    !endif
!endprocedure

' define '$property some $datatype' is subClass of $class1
' link direction is left of $class1 by default
!unquoted procedure superSomeData($class1, $property, $datatype, $directionSup = x, $direction = x)
    !$var = "superSomeData" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    !$direcSup = getDirection($directionSup, down)
    !$m = getVariable($class1)
    !if $m
        $var -$dir-> "$datatype" : $property <<some>>
        $m <|-direcSup- $var
    !else
        $var -$dir-> "$datatype" : $property <<some>>
        $var <|-direcSup- $class1
    !endif
!endprocedure

'-------------------------------------------------------'
' Universal constraint on object property
'-------------------------------------------------------'

' define $class1 is equivalent to '$property only $class2' 
' link direction is left of $class1 by default
' alternative: variable can be supplied
!unquoted procedure only($alias, $property, $class2, $direction = x)
    class "    " as $alias
    !$n = getVariable($class2)
    !$dir = getDirection($direction, right)
    !if $n
        $alias -$dir-> $n : $property <<only>>
    !else
        $alias -$dir-> $class2 : $property <<only>>
    !endif
!endprocedure

' define $class1 is equivalent to '$property only $class2' 
' link direction is left of $class1 by default
!unquoted procedure xOnly($class1, $property, $class2, $tag = "", $direction = x)
    !$m = getVariable($class1)
    !$n = getVariable($class2)
    !$dir = getDirection($direction, right)
    !if $m && $n
        !if $tag
            $m -$dir-> $n : $property $tag
        !else
            $m -$dir-> $n : $property <<only>>
        !endif        
    !else
        !if $tag
            $class1 -$dir-> $class2 : $property $tag
        !else
            $class1 -$dir-> $class2 : $property <<only>>
        !endif 
    !endif
!endprocedure

' State '$class1 and $property only $class2' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for intersection
!unquoted procedure andOnly($alias, $class1, $property, $class2, $directionInter = x, $direction = x)
    !$var = "andOnly" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    only($var, $property, $class2, $dir)
    !$m = getVariable($class1)
    !$dirInter = getDirection($directionInter, right)
    !if $m
        intersection($alias, '["$var", "$m"]', $dirInter)
    !else
        intersection($alias, '["$var", "$class1"]', $dirInter)
    !endif
!endprocedure

' State '$class1 or $property only $class2' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure orOnly($alias, $class1, $property, $class2, $directionUnion = x, $direction = x)
    !$var = "orOnly" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    only($var, $property, $class2, $dir)
    !$m = getVariable($class1)
    !$dirUn = getDirection($directionUnion, right)
    !if $m
        union($alias, '["$var", "$m"]', dirUn)
    !else
        union($alias, '["$var", "$class1"]', dirUn)
    !endif
!endprocedure

' define $class1 is subClass of '$property only $class2' 
' link direction is left of $class1 by default
!unquoted procedure subOnly($class1, $property, $class2, $directionSub = x, $direction = x)
    !$var = "subOnly" + increment(1)
    class "    " as $var
    !$m = getVariable($class1)
    !$n = getVariable($class2)    
    !$dir = getDirection($direction, right)
    !$dirSub = getDirection($directionSub, down)
    !if $m && $n
        $var -$dir-> $n : $property <<only>>
        $var <|-dirSub- $m
    !else
        $var -$dir-> $class2 : $property <<only>>
        $var <|-dirSub- $class1
    !endif
!endprocedure

' define '$property only $class2' is subClass of $class1
' link direction is left of $class1 by default
!unquoted procedure superOnly($class1, $property, $class2, $directionSup = x, $direction = x)
    !$var = "superOnly" + increment(1)
    class "    " as $var
    !$m = getVariable($class1)
    !$n = getVariable($class2)
    !$dir = getDirection($direction, right)
    !$dirSup = getDirection($directionSup, down)
    !if $m && $n
        $var -$dir-> $n : $property <<only>>
        $m <|-dirSup- $var
    !else
        $var -$dir-> $class2 : $property <<only>>
        $class1 <|-dirSup- $var
    !endif
!endprocedure

'-------------------------------------------------------'
' Universal constraint on Data property
'-------------------------------------------------------'
!unquoted procedure onlyData($alias, $property, $datatype, $direction = x)
    class "    " as $alias
    class "$datatype" #white;text:black ##[dotted]black
    !$dir = getDirection($direction, right)
    !if $n
        $alias -$dir-> "$datatype" : $property <<only>>
    !else
        $alias -$dir-> "$datatype" : $property <<only>>
    !endif
!endprocedure

' define $class1 is equivalent to '$property only $datatype' 
' link direction is left of $class1 by default
!unquoted procedure xOnlyData($class1, $property, $datatype, $tag = "", $direction = x)
    class "$datatype" #white;line:black;line.dotted;text:black
    !$m = getVariable($class1)
    !$dir = getDirection($direction, right)
    !if $m && $n
        !if $tag
            $m -$dir-> "$datatype" : $property $tag
        !else
            $m -$dir-> "$datatype" : $property
        !endif        
    !else
        !if $tag
            $class1 -$dir-> "$datatype" : $property $tag
        !else
            $class1 -$dir-> "$datatype" : $property
        !endif 
    !endif
!endprocedure

' State '$class1 and $property only $datatype' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure andOnlyData($alias, $class1, $property, $class2, $directionIntersection = x, $direction = x)
    !$var = "andOnlyData" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    onlyData($var, $property, $class2, $dir)
    !$m = getVariable($class1)
    !$dirInt = getDirection($directionIntersection, right)
    !if $m
        intersection($alias, '["$var", "$m"]', $dirInt)
    !else
        intersection($alias, '["$var", "$class1"]', $dirInt)
    !endif
!endprocedure

' State '$class1 or $property only $datatype' 
' link direction is left of $class1 by default
' alternaitve: pass the variable for union
!unquoted procedure orOnlyData($alias, $class1, $property, $class2, $directionUnion = x, $direction = x)
    !$var = "orOnlyData" + increment(1)
    class "    " as $var
    !$dir = getDirection($direction, right)
    onlyData($var, $property, $class2, $dir)
    !$m = getVariable($class1)
    !$dirUn = getDirection($directionUnion, right)
    !if $m
        union($alias, '["$var", "$m"]', $dirUn)
    !else
        union($alias, '["$var", "$class1"]', $dirUn)
    !endif
!endprocedure

' define $class1 is subClass of '$property some $datatype' 
' link direction is left of $class1 by default
!unquoted procedure subOnlyData($class1, $property, $datatype, $directionSub = x, $direction = x)
    !$var = "subSomeData" + increment(1)
    class "    " as $var
    !$m = getVariable($class1)    
    !$dir = getDirection($direction, right)
    !$dirSub = getDirection($directionSub, right)
    !if $m
        $var -$dir-> "$datatype" : $property <<only>>
        $var <|-$dirSub- $m
    !else
        $var -$dir-> "$datatype" : $property <<only>>
        $var <|-$dirSub- $class1
    !endif
!endprocedure

' define '$property some $datatype' is subClass of $class1
' link direction is left of $class1 by default
!unquoted procedure superOnlyData($class1, $property, $datatype, $directionSup = x, $direction = x)
    !$var = "superSomeData" + increment(1)
    class "    " as $var
    !$m = getVariable($class1)
    !$dir = getDirection($direction, right)
    !$dirSup = getDirection($directionSup, right)
    !if $m
        $var -$dir-> "$datatype" : $property <<only>>
        $m <|-$dirSup- $var
    !else
        $var -$dir-> "$datatype" : $property <<only>>
        $var <|-$dirSup- $class1
    !endif
!endprocedure

'-------------------------------------------------------'
' Property definitions
'-------------------------------------------------------'

' individual(o1, object1)
' individual(o2, object2)
' individual(o3, object3)
' ' assertsameAs(o1, o2)
' assertAllDifferent('["o1", "o2", "o3"]')
@enduml